<?xml version="1.0"?>
<rss version="2.0">
  <channel>
    <title>Eric Sorell Writes Code</title>
    <link>https://sore0159.github.io</link>
    <description>A simple RSS Feed for my devblog</description>
    <item>
            <title>small pg management tool</title>
            <link>https://sore0159.github.io/1710080549_small_pg_management_tool.html</link>
            <pubDate>Oct 8, 2017 (05:49)</pubDate>
            <dc:creator><![CDATA[Eric Sorell]]></dc:creator>
            <description>SMALL PG MANAGEMENT TOOL posted on Oct 8, 2017 (05:49).  Tagged: go, sql, </description>
            <content:encoded><![CDATA[<p>I made a small <a href="https://github.com/sore0159/mn_pg">postgresql table management tool</a> to help my rapid iteration of table schema in my projects.</p>

<p>This project started life as a small part of my <a href="./archives_project_star_system.html">star system project</a>, but I decided to splinter off database management in that project into it&rsquo;s own tiny application.  Now I am considering using postgresql for other small projects and have realized this simple tool could be made more general.</p>

<h3>Why does this project exist?</h3>

<p>This tool allows me to save database connection information in a json file, and have multiple files with different information for different projects.  It allows me to have my schema information in project specific SQL files that I don&rsquo;t have to weave into any project code.</p>

<p>During my development process I often find myself creating a table definition, trying it out, and then changing that definition based on that trial.  It happens so frequently that I think a tool that can very quickly do exactly that will be broadly useful to me.</p>

<h3>What interesting challenges or considerations were encountered?</h3>

<p>Interacting with the database is extremely simple, so the most interesting design decisions grew around how and when to get information from the user.  I had to decide how to store database connection information, table schema, selective table processing, and default behavior.</p>

<p>Options tried out were compiling defaults into the binary, parsing command line arguments in various ways, and parsing json files.  In the end I decided to keep nothing in the binary itself, and make a run-time-parsed, command-line specified json file mandatory for operation.</p>

<p>I initially considered having the json file be a set name, but decided that forcing it to be command line specified allowed me to switch between projects completely at run time.  The configuration file is structured so that I should be able to have each project have its own default behavior that will require no (or minimal) other run-time options to be given.</p>

<p>This is a project of sensible defaults.  I want the tool to do the right thing with a minimum of input, and figuring out exactly what that means will be an iterative process as I continue to use it.</p>

<p>Second, the splitting of the project into a minimal binary and a separate &lsquo;library&rsquo; package with all the main functionality, inspired by how I&rsquo;ve seen Rust projects organized, was an interesting exercise in separation of concerns.</p>
]]></content:encoded>
    </item>
    <item>
            <title>star system table management</title>
            <link>https://sore0159.github.io/1709261911_star_system_table_management.html</link>
            <pubDate>Sep 26, 2017 (19:11)</pubDate>
            <dc:creator><![CDATA[Eric Sorell]]></dc:creator>
            <description>STAR SYSTEM TABLE MANAGEMENT posted on Sep 26, 2017 (19:11).  Tagged: design, go, project star system, sql, </description>
            <content:encoded><![CDATA[<h3>What progress has been made?</h3>

<p>I have built a &lsquo;manage&rsquo; tool to aid in the creation and adjustment of postgres tables and data.  I&rsquo;ve started a basic Star data creation routine and tested loading/reading from the database.</p>

<h3>What interesting challenges have been encountered?</h3>

<ul>
<li><p>Getting postgres operational and synchronized between development and &lsquo;production&rsquo; environments was a challenge, though not really part of this codebase.</p></li>

<li><p>Creating a separate binary for management of tables and star data came about after considering separation of concerns; there&rsquo;s no reason these tasks need to be part of any data serving/authentication.</p></li>

<li><p>When creating the management program I had to consider the appropriate level of abstraction: in the past I have gone a bit overboard in trying to abstract away database code, creating interfaces for managing databases for semi-arbitrary go data structures.  My old <a href="https://github.com/sore0159/golang-helpers">database utility package</a> was a fundamental part of my previous large web app design, but this time I felt a more concrete design would be better.</p></li>

<li><p>I almost wrote another, smaller query generator, but decided to go with manual table schema for the time being.  I intend to use manual queries for table usage, as well.</p></li>

<li><p>I looked at <a href="https://github.com/jackc/pgx">pgx</a> for database driver use, but decided on the more basic standard library postgres sql driver.  I am, however, trying to create a slight wrapper around the db to hopefully make future changes at this level less painful (though I am not optimistic).</p></li>

<li><p>Location coordinates have switched from uint64 to int64 to better use postgresql&rsquo;s bigint data type.  I&rsquo;m uncertain about the captain UID data type: bigserial is the most straightforward choice on the db level, but this is essentially just an int64, and server side I have already built around the theoretically unbounded BigInt.  I will try a &lsquo;numeric&rsquo; database data type for the UID, with concerns about efficiency.</p></li>

<li><p>I had to consider how to go about getting the star data from generating program into the database.  The intended scale of this data is such that holding it in memory is not an option, so I am currently generating data in small chunks and then writing them to a file, which upon completion is fed to Postgres&rsquo; <code>COPY FROM</code> command.  I&rsquo;m trusting postgresql to know how to safely read data from a huge file: this has not yet been tested at scale.</p>

<p><code>COPY FROM</code> has some problems already: primarily requiring a superuser database role to allow postgresql to read from the filesystem.  Combined with difficulty in verifying uniqueness in chunk-generated data, it I might investigate how slow <code>INSERT</code> statements actually are when I start generating data sets large enough.</p></li>
</ul>
]]></content:encoded>
    </item>
    <item>
            <title>setting up postgresql</title>
            <link>https://sore0159.github.io/1709121827_setting_up_postgresql.html</link>
            <pubDate>Sep 12, 2017 (18:27)</pubDate>
            <dc:creator><![CDATA[Eric Sorell]]></dc:creator>
            <description>SETTING UP POSTGRESQL posted on Sep 12, 2017 (18:27).  Tagged: sql, sysadmin, </description>
            <content:encoded><![CDATA[<p>I haven&rsquo;t used PostgreSQL in a while.  I had instances running on my home server and my development laptop, primarily for my <a href="https://github.com/sore0159/overpower">overpower</a> project.  Since then I&rsquo;ve been working on more single-user projects with smaller persistence requirements, and haven&rsquo;t felt the need to delve into setting up tables and program-db communications.</p>

<p>My latest project requires a db, so I have spent some time digging through my old config files, actual paper files, and documentation pages.  After a night of this I do have a new and functional setup for postgresql on both my laptop and server.</p>

<h3>Upgrading Postgres (9.4 -&gt; 9.6)</h3>

<p>On debian, apt-get managed the upgrade quite simply, but with all passwords, roles, and tables half-lost over the past year, I decided a full database clear was a good idea.  Rather than manually purge files, the pg_dropcluster command followed by the pg_createcluster served this purpose.</p>

<p>On macOS, brew install postgresql seemed to work, but after some exploration I noticed the psql command would report a self-version of 9.6, but a <em>server</em> version of 9.4.  Investigation revealed that the previous install of Postgres had been done via the &lsquo;Enterprise Installer&rsquo;.  I had to completely uninstall postgresql 9.4 via the uninstall binary in the 9.4 directory, then reinstall 9.6 via homebrew.</p>

<h3>Role &amp; Authentication Configuration</h3>

<p>Initially Postgres is setup to authenticate based on the system-user name of the attempted login, rather than using passwords.  To do this on debian I had to use <code>sudo -u</code> to mock the Postgres system name, but on macOS the <code>psql -U</code> flag worked fine.  I discovered that homebrew&rsquo;s postgresql superuser was <em>not</em> postgres, but instead the username of the account that ran the install.</p>

<p>Using psql, I used the CREATE USER command to set up a non-superuser with role and db creation privileges, and with an encrypted password.  Then the task was to switch postgresql to password based authentication and never use the superuser account again.</p>

<p>For this, I had to find the pg_hba.conf file.  In debian it was in the expected /etc/postgres/9.6/ directory, but on macOS I wasn&rsquo;t exactly sure where homebrew kept it&rsquo;s files.  Using the command <code>ps aux | grep postgres</code> I was able to investigate the -D flag the server was using, which gave the data directory ( /usr/local/var/postgres ).</p>

<p>Setting authentication to md5 and restarting the postgresql servers, I was then able to log via <code>psql -U</code>, and start setting up the actual roles and databases for my programs to use.  Restarting on macOS was <code>pg_ctl reload -D</code> &hellip; (see previous paragraph for how to find the data directory).  Restarting on debian was <code>/etc/init.d/postgresql restart</code></p>

<h3>Misc. Notes</h3>

<p>The psql tool was invaluable in investigating and testing the state of Postgres.  One thing I learned quickly was that when I wanted to log in to psql, I needed to specify a database.  During setup I hadn&rsquo;t even created a database, but &lsquo;template1&rsquo; served as a system-generated database that I could use.</p>

<p>The details of setting up roles and databases are not included here, as I found <a href="https://www.postgresql.org/docs/9.6/static">Postgres&rsquo;s Docs</a> to adequately cover the commands and options involved.</p>
]]></content:encoded>
    </item>
    <item>
            <title>star systems auth framework</title>
            <link>https://sore0159.github.io/1709071928_star_systems_auth_framework.html</link>
            <pubDate>Sep 7, 2017 (19:28)</pubDate>
            <dc:creator><![CDATA[Eric Sorell]]></dc:creator>
            <description>STAR SYSTEMS AUTH FRAMEWORK posted on Sep 7, 2017 (19:28).  Tagged: design, go, project star system, </description>
            <content:encoded><![CDATA[<h3>What progress has been made?</h3>

<p>&ldquo;Captain&rdquo; data structures have been added using the std&rsquo;s big.Int type for UID, with a mock DB structure and a basic secure-cookie authentication system.  The test server recognizes first and repeat visits.  JSON loading/saving of the mock db works.</p>

<p>The test server has been structured to avoid the use of global variables as much as possible.  Sub-packages, like the current &lsquo;captains&rsquo; package, take as function parameters things like loggers, secure keys, and data files.</p>

<p>The test server has a &lsquo;configurations&rsquo; data structure that at present simply uses a list of default values, but is made to be expandable into command line or rc-file configuration.</p>

<h3>What interesting challenges have been encountered?</h3>

<ol>
<li><p>The shift away from storing the logger and the secure cookie encoder/decoder in global variables occurred because of the separation of design in the package system.  The captains package started out relying on an assumed shared structure with whatever server would be running it, but when building the Route Builder I had to consider how to handle logging.</p>

<p>If the route builder should have access to the (then) global logger, then it should be a part of the server package itself.  I considered splitting off logging/routing from the test server, but decided to instead keep the captains package as separate as possible by having the route builder take a logger (interface) as a parameter.</p>

<p>This done, transforming the logger from a global to a server-held variable seemed a natural next step, along with the rest of the program resources.</p></li>

<li><p>Another interesting consideration was the UID type for the captains data structure.  Given the semi-disposable planned nature for user identity, I decided that an unbounded ID count was worth the extra work in using the big.Int type instead of a simple uint64.  The intention is to store this in a postgres bigserial type.</p></li>

<li><p>Finally, the encryption/security of the authentication system is being handled by the <a href="http://www.gorillatoolkit.org/pkg/securecookie">gorilla/securecookie</a> package.  I know not to &lsquo;roll my own crypto&rsquo;, though I&rsquo;m not sure how much I want to integrate toolkits like gorilla into my program.  For now I&rsquo;m using it as simply as possible, for only the actual encrypting of the UID values.</p></li>
</ol>
]]></content:encoded>
    </item>
    <item>
            <title>project star system</title>
            <link>https://sore0159.github.io/1709061718_project_star_system.html</link>
            <pubDate>Sep 6, 2017 (17:18)</pubDate>
            <dc:creator><![CDATA[Eric Sorell]]></dc:creator>
            <description>PROJECT STAR SYSTEM posted on Sep 6, 2017 (17:18).  Tagged: design outline, go, javascript, project star system, </description>
            <content:encoded><![CDATA[<h3>What is the project?</h3>

<p><a href="https://github.com/sore0159/star_system">Project &ldquo;Star System&rdquo;</a> (working title) is a long-term project to build and deploy a web-app allowing the public to cooperatively explore a large star system.  Inspirations: No Man&rsquo;s Sky, <a href="http://spaceengine.org/">Space Engine</a>, 4X Space Games.</p>

<h3>What are the design goals of the project?</h3>

<ul>
<li>Demonstrate/exercise knowledge of web-app design and deployment in a general sense.</li>
<li>Learn/practice 3D webGL UI development.</li>
<li>Build something that my friends and I enjoy playing with.</li>
<li>Learn/practice large scale (relatively) database usage.</li>
</ul>

<h3>What phases of development do I anticipate?</h3>

<ul>
<li>Authentication: develop a system of password-less disposable identities backed by secure cookies.</li>
<li>Persistence: Set up a Postgres database for the project, ready to scale to the needs of the project as it develops.</li>
<li>Data: Populate the project with simple star data, expand the system to user-specific data such as &ldquo;location&rdquo; and &ldquo;destination&rdquo;.</li>
<li>UI: Develop a webGL display of the data.</li>
<li>Interaction: Develop a system of user commands; build the app system to implement them and expand the UI to accommodate them.</li>
<li>Deployment: Find an external host.  Modify the system to fit the needs of the host.  Set up the server app, database, and https on this host.</li>
<li>User testing: Get some people to use it, and get data from their usage.</li>
</ul>

<h3>Challenges:</h3>

<ul>
<li>Self motivation/focus</li>
<li>Leaning WebGL</li>
<li>Scaling data to a meaningfully large size</li>
<li>Working on an externally hosted system</li>
<li>Creating a useful display of a star field and associated data</li>
<li>Making the product fun to use</li>
</ul>
]]></content:encoded>
    </item>
    <item>
            <title>tabkeeper operational</title>
            <link>https://sore0159.github.io/1709040514_tabkeeper_operational.html</link>
            <pubDate>Sep 4, 2017 (05:14)</pubDate>
            <dc:creator><![CDATA[Eric Sorell]]></dc:creator>
            <description>TABKEEPER OPERATIONAL posted on Sep 4, 2017 (05:14).  Tagged: design, go, project tabkeeper, </description>
            <content:encoded><![CDATA[<p>CSS has proved to be the bulk of this project design, as usability is the primary focus of the project.  Besides the normal &ldquo;making the page look good&rdquo; tasks, there was particular difficulty configuring css to highlight checkbox/radio button labels based on the status of their boxes.</p>

<p>I&rsquo;m happy with html5&rsquo;s form validations for the Description/amount fields.  Though since the step for amount is $0.01 I&rsquo;m disappointed it is not simple to hide the field&rsquo;s step-wheel.  I&rsquo;ve set up defaults so that for the most part, using the page should require minimal typing.</p>

<p>Instead of working on &lsquo;saved&rsquo; charges that would require an entire extra subsystem, I am allowing charges to be marked as &lsquo;repeatable&rsquo;; this allows the UI for repeating charges to be built into the listing of all charges in a natural manner.  I default to non-repeatable simply to minimize display clutter.</p>

<p>Color design will require user feedback: I think having different colors for each direction of charge will be helpful, but it could be too visually noisy.</p>

<p>Next step is to get it running on my local system and configure apache to redirect properly.  This may require some reconfiguration of the app&rsquo;s routing, but otherwise the project is ready for use!</p>
]]></content:encoded>
    </item>
    <item>
            <title>devblog continuation</title>
            <link>https://sore0159.github.io/1709031642_devblog_continuation.html</link>
            <pubDate>Sep 3, 2017 (16:42)</pubDate>
            <dc:creator><![CDATA[Eric Sorell]]></dc:creator>
            <description>DEVBLOG CONTINUATION posted on Sep 3, 2017 (16:42).  Tagged: design, go, project devblog, </description>
            <content:encoded><![CDATA[<p>Continued use of this program has lead to further feature development.  When I&rsquo;m editing a new post, often I want a quick look at the page that I&rsquo;m working on will look, without having to regenerate the entire site.  So I&rsquo;ve added a command to &ldquo;generate just this one page without even needing it to be published, and in a form that can be viewed right now without a web server&rdquo;.</p>

<p>Adding in all the adjustments required for a browser to find the css files locally make me think again on the hard-coded aspects of this program that are specific to me, personally.  While I am not really developing for others to use this program, <em>in principle</em> I do want others to be at least <em>able</em> to run the programs.</p>

<p>So, I&rsquo;ve also adjusted a few settings in the test server and tried to update the README to make resource expectations more explicit.  Things like where the program expects to find template and css resources.  I&rsquo;m keeping defaults in line with my own system for ease of personal use, but trying to allow users to change those settings without editing the source code itself.</p>

<p>Also, I have been messing around with the css in order to make the list of navigation bars a little less clutter at the bottom of the post.  Adding some animation to hide most of the clutter unless hovered over will hopefully not obscure important cues from a visitor.</p>

<p>While implementing this I began adding in page-width based css media queries, since I don&rsquo;t want to have hover-dependant navigation enabled for mobile devices.  I took the opportunity to add a few adjustments to other graphical elements to make them behave better at smaller screen widths, as well.  From visiting my site on my phone, I know that font-size still has some unusual behaviors on mobile that I need to look into, but I&rsquo;m happy that the site is functional and readable.</p>
]]></content:encoded>
    </item>
    <item>
            <title>tabkeeper security</title>
            <link>https://sore0159.github.io/1709030422_tabkeeper_security.html</link>
            <pubDate>Sep 3, 2017 (04:22)</pubDate>
            <dc:creator><![CDATA[Eric Sorell]]></dc:creator>
            <description>TABKEEPER SECURITY posted on Sep 3, 2017 (04:22).  Tagged: design, go, project tabkeeper, </description>
            <content:encoded><![CDATA[<p>It turns out the specific needs of my app were not suited to the more abstract concurrency guards I had built around my files.  Safe read and safe write methods are nice, but my only two interactions are really &ldquo;read all&rdquo; or &ldquo;add this item to whatever you already have&rdquo;.  So I overhauled the concurrency guards to just specifically handle those two operations and abandoned the file-level wrappers.</p>

<p>With regards to security, my first pass of cut&amp;paste IP checking failed, because when I worked on it before I never ran from localhost.  It&rsquo;s not really a great solution anyway so I shelved it for now, but I need to figure out something before this is done.</p>

<p>Also, I realized logging is a serious concern.  There are several places where things could go wrong with file read/writes, and as this program is meant to run in the background on my server hardware I need to setup a logfile for any potential errors.  Nothing too complicated, but another gear that needs to be fitted into the machine.  For now I&rsquo;m using the golang STD log package, works fine.</p>

<p>Starting to tinker around with the HTML interface for the app, which means working with go&rsquo;s template package.  Another area where I&rsquo;ve heard there are some really nice fancy alternatives, but checking out new tools is the opposite of getting something done.</p>

<p>I&rsquo;m going to have to start thinking about how to implement &ldquo;saved&rdquo; commands: if I want a group of monthly reoccurring changes to be available with a single button click, but also configurable through the app, that means another separate subsystem with its own UI and persistence needs.</p>
]]></content:encoded>
    </item>
    <item>
            <title>tabkeeper concurrency</title>
            <link>https://sore0159.github.io/1709022100_tabkeeper_concurrency.html</link>
            <pubDate>Sep 2, 2017 (21:00)</pubDate>
            <dc:creator><![CDATA[Eric Sorell]]></dc:creator>
            <description>TABKEEPER CONCURRENCY posted on Sep 2, 2017 (21:00).  Tagged: design, go, project tabkeeper, </description>
            <content:encoded><![CDATA[<p>First design issue: concurrent file access control.</p>

<p>Pass 1 was a wrapper struct around an *os.File that used a sync.RWMutex to control Read and Write calls.  This failed when I realized that after reading from the file, the next pageload would not start over at the beginning.  I looked at adjusting the ReadAt mark or using Seek to move the cursor, but this got complicated when considering that I did <em>not</em> want to adjust Write calls.</p>

<p>Questions this raised:</p>

<ul>
<li>Is it a bad idea for a long-running server to hold an open file for an extended time?</li>
<li>How does the system handle multiple simultaneous &ldquo;file&rdquo; objects on the same filesystem object?</li>
</ul>

<p>Pass 2 was a separate manager in charge of opening/closing file objects for every request, guarded again my a sync.RWMutex.  I miss rust&rsquo;s guard syntax for this kind of problem.  Pass 2A looked like:</p>

<pre><code class="language-go">func (m *SafeManager) GetR() (*os.File, err) { 
     m.Guard.RLock()
     return os.Open(m.FileName)
}
func (m *SafeManager) DoneR(f *os.File) {
     f.Close()
     m.RUnlock()
}

func Example() {
     f, err := m.GetR()
     if err != nil { ... }
     defer m.DoneR(f)
     ...
}
</code></pre>

<p>But I ended up with my current Pass 2B system, of having a wrapper around *os.File <em>and</em> a manager: calls to the manager wait on the mutex, then open and wrap a *os.File in a SafeFile, which wraps the Close() method to also unlock the appropriate guard in the manager.  This means when you use a SafeFile you don&rsquo;t need to worry about how it&rsquo;s safety is implemented beyond normal File closing.</p>

<p>Not sure what to do if there is an error on the file close call: I just ignore these for now.</p>

<p>So, the current system can safely read/write to a file based on web calls.  Next up, creating a data structure to represent tab entries, and implementing JSON parsing for read/writes.  I have some concern about processing needed once the list gets long, but at present I believe having a yearly file rotation will keep things fine.</p>
]]></content:encoded>
    </item>
    <item>
            <title>project tabkeeper</title>
            <link>https://sore0159.github.io/1709021950_project_tabkeeper.html</link>
            <pubDate>Sep 2, 2017 (19:50)</pubDate>
            <dc:creator><![CDATA[Eric Sorell]]></dc:creator>
            <description>PROJECT TABKEEPER posted on Sep 2, 2017 (19:50).  Tagged: design outline, go, project tabkeeper, </description>
            <content:encoded><![CDATA[<p>Starting up a small project: <a href="https://github.com/sore0159/tabkeeper">tabkeeper</a>.  My wife and I have a constant running tab that we use to manage our house finances: when either of us pay for a &lsquo;house bill&rsquo;, we mark down what the other owes on the tab.  Right now we use a Google Doc spreadsheet to do this, but this is inconvenient in some small ways.  Hence, I am creating a small app for our home server to take the place of the spreadsheet.</p>

<p>The main design goal of this app will be an improved user interface: streamlined data entry and automated data processing (date marking tab entries, adding up the tab).  After basic functionality is in place, I can add extended functionality like sorting/filtering and customizable recurring entries.</p>

<p>As this will be a web page we use through our browsers, security is a concern.  I will attempt to limit access to only our home computers through both settings on the home server&rsquo;s reverse proxy (apache2) and in the design of the app itself.  Since we are not hosting any actual financial information and ease of use is a priority, users will not be involved in any authentication steps such as passwords.</p>

<p>Another primary concern is data persistence.  For more advanced apps, a database is a natural choice and nothing about this app has any complications that would require more than a simple SQL table and a few SELECT/INSERT statements.  However, at least at this stage of the project, using a database seems like overkill.  I will be starting the project using a single file that the app will read/write it&rsquo;s data to.</p>

<p>Using a single file for data persistence does present some challenges: safety from concurrent read/write access, and data parsing.  Since the data has fairly simple structure &ndash; a list of (time, description, amount) &ndash; I will be using go&rsquo;s easy to use JSON parsing libraries.  Storing the data in JSON keeps it readable by humans should something go wrong, and means I don&rsquo;t have to write a comma/space parser myself.</p>

<p>Concurrency issues around file access I have less experience with: this is one of the big strengths of a database and a good reason to investigate small scale databases like SQLite or boltdb if the project expands beyond it&rsquo;s present small scale.  Right now I hope to get some useful experience out of experimenting with a mutex-lock system of file access control.</p>
]]></content:encoded>
    </item>
    <item>
            <title>devblog retrospective</title>
            <link>https://sore0159.github.io/1708211850_devblog_retrospective.html</link>
            <pubDate>Aug 21, 2017 (18:50)</pubDate>
            <dc:creator><![CDATA[Eric Sorell]]></dc:creator>
            <description>DEVBLOG RETROSPECTIVE posted on Aug 21, 2017 (18:50).  Tagged: go, project devblog, retrospective, </description>
            <content:encoded><![CDATA[<h3>A quick aside</h3>

<p>Since this is the first post to <a href=".">Eric Sorell Writes Code</a>: if you want to know more about this site visit <a href="index.html">the main page</a>, or if you want to know about me in particular visit <a href="about.html">the page about me</a>.</p>

<p>This post is a little more high-level than most project posts I anticipate due to the time between working on the project and actually blogging about that work.  Now that the blog exists, future projects can be documented while in-progress.</p>

<p>I&rsquo;m also uncertain about the basic structure of these posts; if I want a conversational tone, a detailed examination or a high leveled overview, and other concerns.  Things need to be shaken out for a bit before they settle into a solid style.</p>

<h3>What is the DevBlog project?</h3>

<p>My <a href="https://github.com/sore0159/devblog">DevBlog</a> project was started because I wanted an actual product for my own use: a tool to manage a simple set of markdown files into an organized and formatted web site.  I like writing in vim on the console, and markdown has proven to have everything I want.</p>

<p>Previously I have simply copy/pasted my journals into Google+ to put them online.  The goals with this project were to have journals be easier to navigate and to be formatted in a manner more suiting my personal aesthetic.</p>

<p>Beyond product usability, further design goals of the project were:</p>

<ul>
<li>Don&rsquo;t take forever.</li>
<li>Keep the code presentable and compilable by others.</li>
</ul>

<h3>How did the project go?</h3>

<p>The first design was for a site that statically generated most page content, but dynamically created the navigation and page-design elements based on user input.  The idea here was to allow for users to filter or search for posts.  I went through a few different approaches to the overall structure of the project at this point, deciding how to divide parsing responsibilities.</p>

<p>After a bit of a break from the project, I came back to it with the decision to create an entirely static site generator.  Conversations with friends about the cost/benefit ratio of semi-dynamic parsing made me reconsider my previous approach, and after investigating github&rsquo;s static site hosting I was convinced.</p>

<p>This means the project ended up being significantly simpler than my initial estimation.  Mainly, I no longer needed to have my server manage an index that it would use to serve content.  The question of how to handle navigation was solved by a quick-and-dirty approach of including multiple navigation links on each post, one for every tag a post has.  This creates a bit of clutter, but can be fixed with javascript down the line if feedback indicates it is a problem.</p>

<p>Several tweaks to the options and configuration of the program were made after attempted use.  Initially I had hoped for a single binary that could be used in any directory without need for outside resources, but recompilation on every change ended up being a hassle.  Additionally, there turned out to be no need for portability: in reality I am keeping all my blog posts and associated resources in one main directory anyway.</p>

<h3>Concluding thoughts</h3>

<p>I feel like the design considerations regarding index structuring and semi-dynamic routing were the most interesting aspects of this project, and with their abandonment I don&rsquo;t have much to talk about here.  I have made a program that just reads in some files, templates the contents, and then outputs formatted files.  It&rsquo;s pretty simple!</p>

<p>This project finally convinced me to create a github based gopath in my local file system, so my code should <em>just run</em> when downloaded by someone else.  I don&rsquo;t expect anyone else to actually use this program, but I want this and all projects going forward to be portfolio pieces.  Having an examiner be able to compile and run my programs themself seems a valuable thing.</p>

<p>I have not really commented my code, or attempted to structure the files/packages for display purposes.  Part of this is the simplicity and small scale of the project: everything pretty much just does what it says.  Similarly there are no tests, since there are no real invariants I have to maintain through future upgrades.</p>

<p>From a product standpoint, I think my little dv command is much more suited to my tastes than any premade content platform I&rsquo;ve seen so far.  The site design needs work, and I expect to continue to expand functionality of the generator as I use it going forward.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>